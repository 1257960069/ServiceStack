// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: services.proto
// </auto-generated>
// Original file comments:
// Options:
// Date: 2019-12-18 00:36:51
// Version: 5.71
// Tip: To override a DTO option, remove "//" prefix before updating
// BaseUrl: http://localhost:20000
//
// //GlobalNamespace: 
// //AddDescriptionAsComments: True
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ServiceStack.Extensions.Tests.Protoc {
  public static partial class GrpcServices
  {
    static readonly string __ServiceName = "GrpcServices";

    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.AddHeader> __Marshaller_AddHeader = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.AddHeader.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Marshaller_EmptyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.AnyHello> __Marshaller_AnyHello = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.AnyHello.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> __Marshaller_HelloResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.HelloResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.AssignRoles> __Marshaller_AssignRoles = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.AssignRoles.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse> __Marshaller_AssignRolesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.Authenticate> __Marshaller_Authenticate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.Authenticate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> __Marshaller_AuthenticateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo> __Marshaller_ChangeConnectionInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> __Marshaller_ChangeDbResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ChangeDb> __Marshaller_ChangeDb = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ChangeDb.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken> __Marshaller_ConvertSessionToToken = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse> __Marshaller_ConvertSessionToTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.CreateTodo> __Marshaller_CreateTodo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.CreateTodo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse> __Marshaller_CreateTodoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo> __Marshaller_DeleteTodo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos> __Marshaller_DeleteTodos = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken> __Marshaller_GetAccessToken = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse> __Marshaller_GetAccessTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys> __Marshaller_GetApiKeys = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse> __Marshaller_GetApiKeysResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetHello> __Marshaller_GetHello = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetHello.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetTodo> __Marshaller_GetTodo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetTodo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse> __Marshaller_GetTodoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetTodos> __Marshaller_GetTodos = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetTodos.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse> __Marshaller_GetTodosResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt> __Marshaller_HelloJwt = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.HelloJwt.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> __Marshaller_HelloJwtResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.Incr> __Marshaller_Incr = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.Incr.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.Multiply> __Marshaller_Multiply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.Multiply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse> __Marshaller_MultiplyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel> __Marshaller_PostChatToChannel = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ChatMessage> __Marshaller_ChatMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ChatMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy> __Marshaller_QueryCaseInsensitiveOrderBy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> __Marshaller_QueryResponse_Rockstar = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo> __Marshaller_QueryChangeConnectionInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences> __Marshaller_QueryCustomRockstarsReferences = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference> __Marshaller_QueryResponse_RockstarReference = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars> __Marshaller_QueryOverridedCustomRockstars = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> __Marshaller_QueryResponse_CustomRockstar = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars> __Marshaller_QueryOverridedRockstars = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin> __Marshaller_QueryRockstarAlbumsCustomLeftJoin = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys> __Marshaller_RegenerateApiKeys = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse> __Marshaller_RegenerateApiKeysResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.Register> __Marshaller_Register = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.Register.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> __Marshaller_RegisterResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> __Marshaller_RequiresAuth = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ResetTodos> __Marshaller_ResetTodos = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ResetTodos.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.Secured> __Marshaller_Secured = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.Secured.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse> __Marshaller_SecuredResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.StreamFiles> __Marshaller_StreamFiles = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.StreamFiles.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.FileContent> __Marshaller_FileContent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.FileContent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.StreamMovies> __Marshaller_StreamMovies = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.StreamMovies.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie> __Marshaller_QueryResponse_Movie = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.StreamServerEvents> __Marshaller_StreamServerEvents = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.StreamServerEvents.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.StreamServerEventsResponse> __Marshaller_StreamServerEventsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.StreamServerEventsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.Throw> __Marshaller_Throw = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.Throw.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom> __Marshaller_ThrowCustom = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse> __Marshaller_ThrowCustomResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid> __Marshaller_ThrowVoid = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators> __Marshaller_TriggerValidators = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles> __Marshaller_UnAssignRoles = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse> __Marshaller_UnAssignRolesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo> __Marshaller_UpdateTodo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo.Parser.ParseFrom);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AddHeader, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_GetAddHeader = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AddHeader, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAddHeader",
        __Marshaller_AddHeader,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> __Method_GetAnyHello = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnyHello",
        __Marshaller_AnyHello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> __Method_PostAnyHello = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAnyHello",
        __Marshaller_AnyHello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> __Method_PutAnyHello = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutAnyHello",
        __Marshaller_AnyHello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> __Method_DeleteAnyHello = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnyHello",
        __Marshaller_AnyHello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> __Method_PatchAnyHello = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchAnyHello",
        __Marshaller_AnyHello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AssignRoles, global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse> __Method_PostAssignRoles = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.AssignRoles, global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAssignRoles",
        __Marshaller_AssignRoles,
        __Marshaller_AssignRolesResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> __Method_OptionsAuthenticate = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OptionsAuthenticate",
        __Marshaller_Authenticate,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> __Method_GetAuthenticate = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAuthenticate",
        __Marshaller_Authenticate,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> __Method_PostAuthenticate = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostAuthenticate",
        __Marshaller_Authenticate,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> __Method_DeleteAuthenticate = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAuthenticate",
        __Marshaller_Authenticate,
        __Marshaller_AuthenticateResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo, global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> __Method_GetChangeConnectionInfo = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo, global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChangeConnectionInfo",
        __Marshaller_ChangeConnectionInfo,
        __Marshaller_ChangeDbResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ChangeDb, global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> __Method_GetChangeDb = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ChangeDb, global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChangeDb",
        __Marshaller_ChangeDb,
        __Marshaller_ChangeDbResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken, global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse> __Method_PostConvertSessionToToken = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken, global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostConvertSessionToToken",
        __Marshaller_ConvertSessionToToken,
        __Marshaller_ConvertSessionToTokenResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.CreateTodo, global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse> __Method_PostCreateTodo = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.CreateTodo, global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostCreateTodo",
        __Marshaller_CreateTodo,
        __Marshaller_CreateTodoResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_CallDeleteTodo = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallDeleteTodo",
        __Marshaller_DeleteTodo,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_CallDeleteTodos = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallDeleteTodos",
        __Marshaller_DeleteTodos,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken, global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse> __Method_PostGetAccessToken = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken, global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostGetAccessToken",
        __Marshaller_GetAccessToken,
        __Marshaller_GetAccessTokenResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys, global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse> __Method_CallGetApiKeys = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys, global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallGetApiKeys",
        __Marshaller_GetApiKeys,
        __Marshaller_GetApiKeysResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> __Method_CallGetHello = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallGetHello",
        __Marshaller_GetHello,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetTodo, global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse> __Method_CallGetTodo = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetTodo, global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallGetTodo",
        __Marshaller_GetTodo,
        __Marshaller_GetTodoResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetTodos, global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse> __Method_CallGetTodos = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.GetTodos, global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallGetTodos",
        __Marshaller_GetTodos,
        __Marshaller_GetTodosResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> __Method_GetHelloJwt = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHelloJwt",
        __Marshaller_HelloJwt,
        __Marshaller_HelloJwtResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> __Method_PostHelloJwt = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostHelloJwt",
        __Marshaller_HelloJwt,
        __Marshaller_HelloJwtResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> __Method_PutHelloJwt = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutHelloJwt",
        __Marshaller_HelloJwt,
        __Marshaller_HelloJwtResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> __Method_DeleteHelloJwt = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteHelloJwt",
        __Marshaller_HelloJwt,
        __Marshaller_HelloJwtResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> __Method_PatchHelloJwt = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchHelloJwt",
        __Marshaller_HelloJwt,
        __Marshaller_HelloJwtResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_GetIncr = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIncr",
        __Marshaller_Incr,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_PostIncr = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostIncr",
        __Marshaller_Incr,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_PutIncr = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutIncr",
        __Marshaller_Incr,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_DeleteIncr = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteIncr",
        __Marshaller_Incr,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_PatchIncr = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchIncr",
        __Marshaller_Incr,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Multiply, global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse> __Method_PostMultiply = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Multiply, global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostMultiply",
        __Marshaller_Multiply,
        __Marshaller_MultiplyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel, global::ServiceStack.Extensions.Tests.Protoc.ChatMessage> __Method_CallPostChatToChannel = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel, global::ServiceStack.Extensions.Tests.Protoc.ChatMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallPostChatToChannel",
        __Marshaller_PostChatToChannel,
        __Marshaller_ChatMessage);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> __Method_GetQueryCaseInsensitiveOrderBy = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueryCaseInsensitiveOrderBy",
        __Marshaller_QueryCaseInsensitiveOrderBy,
        __Marshaller_QueryResponse_Rockstar);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> __Method_GetQueryChangeConnectionInfo = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueryChangeConnectionInfo",
        __Marshaller_QueryChangeConnectionInfo,
        __Marshaller_QueryResponse_Rockstar);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference> __Method_GetQueryCustomRockstarsReferences = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueryCustomRockstarsReferences",
        __Marshaller_QueryCustomRockstarsReferences,
        __Marshaller_QueryResponse_RockstarReference);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> __Method_GetQueryOverridedCustomRockstars = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueryOverridedCustomRockstars",
        __Marshaller_QueryOverridedCustomRockstars,
        __Marshaller_QueryResponse_CustomRockstar);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> __Method_GetQueryOverridedRockstars = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueryOverridedRockstars",
        __Marshaller_QueryOverridedRockstars,
        __Marshaller_QueryResponse_Rockstar);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> __Method_GetQueryRockstarAlbumsCustomLeftJoin = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueryRockstarAlbumsCustomLeftJoin",
        __Marshaller_QueryRockstarAlbumsCustomLeftJoin,
        __Marshaller_QueryResponse_CustomRockstar);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys, global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse> __Method_PostRegenerateApiKeys = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys, global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostRegenerateApiKeys",
        __Marshaller_RegenerateApiKeys,
        __Marshaller_RegenerateApiKeysResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Register, global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> __Method_PutRegister = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Register, global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutRegister",
        __Marshaller_Register,
        __Marshaller_RegisterResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Register, global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> __Method_PostRegister = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Register, global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostRegister",
        __Marshaller_Register,
        __Marshaller_RegisterResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> __Method_GetRequiresAuth = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRequiresAuth",
        __Marshaller_RequiresAuth,
        __Marshaller_RequiresAuth);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> __Method_PostRequiresAuth = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostRequiresAuth",
        __Marshaller_RequiresAuth,
        __Marshaller_RequiresAuth);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> __Method_PutRequiresAuth = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutRequiresAuth",
        __Marshaller_RequiresAuth,
        __Marshaller_RequiresAuth);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> __Method_DeleteRequiresAuth = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRequiresAuth",
        __Marshaller_RequiresAuth,
        __Marshaller_RequiresAuth);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> __Method_PatchRequiresAuth = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchRequiresAuth",
        __Marshaller_RequiresAuth,
        __Marshaller_RequiresAuth);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ResetTodos, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_PostResetTodos = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ResetTodos, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostResetTodos",
        __Marshaller_ResetTodos,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Secured, global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse> __Method_PostSecured = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Secured, global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostSecured",
        __Marshaller_Secured,
        __Marshaller_SecuredResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.StreamFiles, global::ServiceStack.Extensions.Tests.Protoc.FileContent> __Method_ServerStreamFiles = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.StreamFiles, global::ServiceStack.Extensions.Tests.Protoc.FileContent>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreamFiles",
        __Marshaller_StreamFiles,
        __Marshaller_FileContent);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.StreamMovies, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie> __Method_GetStreamMovies = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.StreamMovies, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStreamMovies",
        __Marshaller_StreamMovies,
        __Marshaller_QueryResponse_Movie);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.StreamServerEvents, global::ServiceStack.Extensions.Tests.Protoc.StreamServerEventsResponse> __Method_ServerStreamServerEvents = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.StreamServerEvents, global::ServiceStack.Extensions.Tests.Protoc.StreamServerEventsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerStreamServerEvents",
        __Marshaller_StreamServerEvents,
        __Marshaller_StreamServerEventsResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Throw, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> __Method_GetThrow = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.Throw, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetThrow",
        __Marshaller_Throw,
        __Marshaller_HelloResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom, global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse> __Method_GetThrowCustom = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom, global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetThrowCustom",
        __Marshaller_ThrowCustom,
        __Marshaller_ThrowCustomResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_GetThrowVoid = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetThrowVoid",
        __Marshaller_ThrowVoid,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_PostTriggerValidators = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostTriggerValidators",
        __Marshaller_TriggerValidators,
        __Marshaller_EmptyResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles, global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse> __Method_PostUnAssignRoles = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles, global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostUnAssignRoles",
        __Marshaller_UnAssignRoles,
        __Marshaller_UnAssignRolesResponse);

    static readonly grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> __Method_PutUpdateTodo = new grpc::Method<global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PutUpdateTodo",
        __Marshaller_UpdateTodo,
        __Marshaller_EmptyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ServiceStack.Extensions.Tests.Protoc.ServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GrpcServices</summary>
    [grpc::BindServiceMethod(typeof(GrpcServices), "BindService")]
    public abstract partial class GrpcServicesBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetAddHeader(global::ServiceStack.Extensions.Tests.Protoc.AddHeader request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> GetAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PostAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PutAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> DeleteAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PatchAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse> PostAssignRoles(global::ServiceStack.Extensions.Tests.Protoc.AssignRoles request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> OptionsAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> GetAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> PostAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> DeleteAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> GetChangeConnectionInfo(global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> GetChangeDb(global::ServiceStack.Extensions.Tests.Protoc.ChangeDb request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse> PostConvertSessionToToken(global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse> PostCreateTodo(global::ServiceStack.Extensions.Tests.Protoc.CreateTodo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> CallDeleteTodo(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> CallDeleteTodos(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse> PostGetAccessToken(global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse> CallGetApiKeys(global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> CallGetHello(global::ServiceStack.Extensions.Tests.Protoc.GetHello request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse> CallGetTodo(global::ServiceStack.Extensions.Tests.Protoc.GetTodo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse> CallGetTodos(global::ServiceStack.Extensions.Tests.Protoc.GetTodos request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> GetHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PostHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PutHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> DeleteHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PatchHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PutIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> DeleteIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PatchIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse> PostMultiply(global::ServiceStack.Extensions.Tests.Protoc.Multiply request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.ChatMessage> CallPostChatToChannel(global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryCaseInsensitiveOrderBy(global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryChangeConnectionInfo(global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference> GetQueryCustomRockstarsReferences(global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> GetQueryOverridedCustomRockstars(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryOverridedRockstars(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> GetQueryRockstarAlbumsCustomLeftJoin(global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse> PostRegenerateApiKeys(global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> PutRegister(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> PostRegister(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> GetRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PostRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PutRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> DeleteRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PatchRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostResetTodos(global::ServiceStack.Extensions.Tests.Protoc.ResetTodos request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse> PostSecured(global::ServiceStack.Extensions.Tests.Protoc.Secured request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ServerStreamFiles(global::ServiceStack.Extensions.Tests.Protoc.StreamFiles request, grpc::IServerStreamWriter<global::ServiceStack.Extensions.Tests.Protoc.FileContent> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie> GetStreamMovies(global::ServiceStack.Extensions.Tests.Protoc.StreamMovies request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ServerStreamServerEvents(global::ServiceStack.Extensions.Tests.Protoc.StreamServerEvents request, grpc::IServerStreamWriter<global::ServiceStack.Extensions.Tests.Protoc.StreamServerEventsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> GetThrow(global::ServiceStack.Extensions.Tests.Protoc.Throw request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse> GetThrowCustom(global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetThrowVoid(global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostTriggerValidators(global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse> PostUnAssignRoles(global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PutUpdateTodo(global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GrpcServices</summary>
    public partial class GrpcServicesClient : grpc::ClientBase<GrpcServicesClient>
    {
      /// <summary>Creates a new client for GrpcServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GrpcServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GrpcServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GrpcServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GrpcServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GrpcServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse GetAddHeader(global::ServiceStack.Extensions.Tests.Protoc.AddHeader request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAddHeader(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse GetAddHeader(global::ServiceStack.Extensions.Tests.Protoc.AddHeader request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAddHeader, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetAddHeaderAsync(global::ServiceStack.Extensions.Tests.Protoc.AddHeader request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAddHeaderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetAddHeaderAsync(global::ServiceStack.Extensions.Tests.Protoc.AddHeader request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAddHeader, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse GetAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnyHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse GetAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnyHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> GetAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnyHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> GetAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnyHello, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse PostAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnyHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse PostAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAnyHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PostAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAnyHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PostAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAnyHello, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse PutAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutAnyHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse PutAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutAnyHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PutAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutAnyHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PutAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutAnyHello, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse DeleteAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnyHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse DeleteAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnyHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> DeleteAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnyHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> DeleteAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnyHello, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse PatchAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnyHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse PatchAnyHello(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchAnyHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PatchAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchAnyHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> PatchAnyHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.AnyHello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchAnyHello, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse PostAssignRoles(global::ServiceStack.Extensions.Tests.Protoc.AssignRoles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAssignRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse PostAssignRoles(global::ServiceStack.Extensions.Tests.Protoc.AssignRoles request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAssignRoles, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse> PostAssignRolesAsync(global::ServiceStack.Extensions.Tests.Protoc.AssignRoles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAssignRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse> PostAssignRolesAsync(global::ServiceStack.Extensions.Tests.Protoc.AssignRoles request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAssignRoles, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse OptionsAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionsAuthenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse OptionsAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OptionsAuthenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> OptionsAuthenticateAsync(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptionsAuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> OptionsAuthenticateAsync(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OptionsAuthenticate, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse GetAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse GetAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAuthenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> GetAuthenticateAsync(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> GetAuthenticateAsync(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAuthenticate, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse PostAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuthenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse PostAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostAuthenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> PostAuthenticateAsync(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> PostAuthenticateAsync(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostAuthenticate, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse DeleteAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAuthenticate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse DeleteAuthenticate(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAuthenticate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> DeleteAuthenticateAsync(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAuthenticateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse> DeleteAuthenticateAsync(global::ServiceStack.Extensions.Tests.Protoc.Authenticate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAuthenticate, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse GetChangeConnectionInfo(global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChangeConnectionInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse GetChangeConnectionInfo(global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChangeConnectionInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> GetChangeConnectionInfoAsync(global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChangeConnectionInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> GetChangeConnectionInfoAsync(global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChangeConnectionInfo, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse GetChangeDb(global::ServiceStack.Extensions.Tests.Protoc.ChangeDb request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChangeDb(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse GetChangeDb(global::ServiceStack.Extensions.Tests.Protoc.ChangeDb request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChangeDb, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> GetChangeDbAsync(global::ServiceStack.Extensions.Tests.Protoc.ChangeDb request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChangeDbAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse> GetChangeDbAsync(global::ServiceStack.Extensions.Tests.Protoc.ChangeDb request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChangeDb, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse PostConvertSessionToToken(global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConvertSessionToToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse PostConvertSessionToToken(global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostConvertSessionToToken, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse> PostConvertSessionToTokenAsync(global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostConvertSessionToTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse> PostConvertSessionToTokenAsync(global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostConvertSessionToToken, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse PostCreateTodo(global::ServiceStack.Extensions.Tests.Protoc.CreateTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCreateTodo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse PostCreateTodo(global::ServiceStack.Extensions.Tests.Protoc.CreateTodo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostCreateTodo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse> PostCreateTodoAsync(global::ServiceStack.Extensions.Tests.Protoc.CreateTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostCreateTodoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse> PostCreateTodoAsync(global::ServiceStack.Extensions.Tests.Protoc.CreateTodo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostCreateTodo, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse CallDeleteTodo(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallDeleteTodo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse CallDeleteTodo(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallDeleteTodo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> CallDeleteTodoAsync(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallDeleteTodoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> CallDeleteTodoAsync(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallDeleteTodo, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse CallDeleteTodos(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallDeleteTodos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse CallDeleteTodos(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallDeleteTodos, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> CallDeleteTodosAsync(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallDeleteTodosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> CallDeleteTodosAsync(global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallDeleteTodos, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse PostGetAccessToken(global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostGetAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse PostGetAccessToken(global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostGetAccessToken, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse> PostGetAccessTokenAsync(global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostGetAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse> PostGetAccessTokenAsync(global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostGetAccessToken, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse CallGetApiKeys(global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetApiKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse CallGetApiKeys(global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallGetApiKeys, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse> CallGetApiKeysAsync(global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetApiKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse> CallGetApiKeysAsync(global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallGetApiKeys, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse CallGetHello(global::ServiceStack.Extensions.Tests.Protoc.GetHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse CallGetHello(global::ServiceStack.Extensions.Tests.Protoc.GetHello request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallGetHello, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> CallGetHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.GetHello request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> CallGetHelloAsync(global::ServiceStack.Extensions.Tests.Protoc.GetHello request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallGetHello, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse CallGetTodo(global::ServiceStack.Extensions.Tests.Protoc.GetTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetTodo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse CallGetTodo(global::ServiceStack.Extensions.Tests.Protoc.GetTodo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallGetTodo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse> CallGetTodoAsync(global::ServiceStack.Extensions.Tests.Protoc.GetTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetTodoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse> CallGetTodoAsync(global::ServiceStack.Extensions.Tests.Protoc.GetTodo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallGetTodo, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse CallGetTodos(global::ServiceStack.Extensions.Tests.Protoc.GetTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetTodos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse CallGetTodos(global::ServiceStack.Extensions.Tests.Protoc.GetTodos request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallGetTodos, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse> CallGetTodosAsync(global::ServiceStack.Extensions.Tests.Protoc.GetTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallGetTodosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse> CallGetTodosAsync(global::ServiceStack.Extensions.Tests.Protoc.GetTodos request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallGetTodos, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse GetHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHelloJwt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse GetHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHelloJwt, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> GetHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHelloJwtAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> GetHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHelloJwt, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse PostHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHelloJwt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse PostHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostHelloJwt, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PostHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostHelloJwtAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PostHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostHelloJwt, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse PutHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutHelloJwt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse PutHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutHelloJwt, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PutHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutHelloJwtAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PutHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutHelloJwt, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse DeleteHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHelloJwt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse DeleteHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteHelloJwt, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> DeleteHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHelloJwtAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> DeleteHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteHelloJwt, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse PatchHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchHelloJwt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse PatchHelloJwt(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchHelloJwt, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PatchHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchHelloJwtAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse> PatchHelloJwtAsync(global::ServiceStack.Extensions.Tests.Protoc.HelloJwt request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchHelloJwt, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse GetIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIncr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse GetIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIncr, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIncrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIncr, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PostIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostIncr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PostIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostIncr, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostIncrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostIncr, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PutIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIncr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PutIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutIncr, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PutIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutIncrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PutIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutIncr, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse DeleteIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIncr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse DeleteIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteIncr, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> DeleteIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIncrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> DeleteIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteIncr, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PatchIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchIncr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PatchIncr(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchIncr, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PatchIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchIncrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PatchIncrAsync(global::ServiceStack.Extensions.Tests.Protoc.Incr request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchIncr, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse PostMultiply(global::ServiceStack.Extensions.Tests.Protoc.Multiply request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostMultiply(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse PostMultiply(global::ServiceStack.Extensions.Tests.Protoc.Multiply request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostMultiply, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse> PostMultiplyAsync(global::ServiceStack.Extensions.Tests.Protoc.Multiply request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostMultiplyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse> PostMultiplyAsync(global::ServiceStack.Extensions.Tests.Protoc.Multiply request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostMultiply, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ChatMessage CallPostChatToChannel(global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallPostChatToChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ChatMessage CallPostChatToChannel(global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallPostChatToChannel, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ChatMessage> CallPostChatToChannelAsync(global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallPostChatToChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ChatMessage> CallPostChatToChannelAsync(global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallPostChatToChannel, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar GetQueryCaseInsensitiveOrderBy(global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryCaseInsensitiveOrderBy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar GetQueryCaseInsensitiveOrderBy(global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueryCaseInsensitiveOrderBy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryCaseInsensitiveOrderByAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryCaseInsensitiveOrderByAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryCaseInsensitiveOrderByAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueryCaseInsensitiveOrderBy, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar GetQueryChangeConnectionInfo(global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryChangeConnectionInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar GetQueryChangeConnectionInfo(global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueryChangeConnectionInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryChangeConnectionInfoAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryChangeConnectionInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryChangeConnectionInfoAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueryChangeConnectionInfo, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference GetQueryCustomRockstarsReferences(global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryCustomRockstarsReferences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference GetQueryCustomRockstarsReferences(global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueryCustomRockstarsReferences, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference> GetQueryCustomRockstarsReferencesAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryCustomRockstarsReferencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference> GetQueryCustomRockstarsReferencesAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueryCustomRockstarsReferences, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar GetQueryOverridedCustomRockstars(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryOverridedCustomRockstars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar GetQueryOverridedCustomRockstars(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueryOverridedCustomRockstars, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> GetQueryOverridedCustomRockstarsAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryOverridedCustomRockstarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> GetQueryOverridedCustomRockstarsAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueryOverridedCustomRockstars, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar GetQueryOverridedRockstars(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryOverridedRockstars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar GetQueryOverridedRockstars(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueryOverridedRockstars, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryOverridedRockstarsAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryOverridedRockstarsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar> GetQueryOverridedRockstarsAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueryOverridedRockstars, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar GetQueryRockstarAlbumsCustomLeftJoin(global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryRockstarAlbumsCustomLeftJoin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar GetQueryRockstarAlbumsCustomLeftJoin(global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueryRockstarAlbumsCustomLeftJoin, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> GetQueryRockstarAlbumsCustomLeftJoinAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueryRockstarAlbumsCustomLeftJoinAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar> GetQueryRockstarAlbumsCustomLeftJoinAsync(global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueryRockstarAlbumsCustomLeftJoin, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse PostRegenerateApiKeys(global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRegenerateApiKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse PostRegenerateApiKeys(global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostRegenerateApiKeys, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse> PostRegenerateApiKeysAsync(global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRegenerateApiKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse> PostRegenerateApiKeysAsync(global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostRegenerateApiKeys, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse PutRegister(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutRegister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse PutRegister(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutRegister, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> PutRegisterAsync(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutRegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> PutRegisterAsync(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutRegister, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse PostRegister(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRegister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse PostRegister(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostRegister, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> PostRegisterAsync(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse> PostRegisterAsync(global::ServiceStack.Extensions.Tests.Protoc.Register request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostRegister, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth GetRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRequiresAuth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth GetRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRequiresAuth, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> GetRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRequiresAuthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> GetRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRequiresAuth, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth PostRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRequiresAuth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth PostRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostRequiresAuth, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PostRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostRequiresAuthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PostRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostRequiresAuth, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth PutRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutRequiresAuth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth PutRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutRequiresAuth, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PutRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutRequiresAuthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PutRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutRequiresAuth, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth DeleteRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRequiresAuth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth DeleteRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRequiresAuth, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> DeleteRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRequiresAuthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> DeleteRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRequiresAuth, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth PatchRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchRequiresAuth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth PatchRequiresAuth(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchRequiresAuth, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PatchRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchRequiresAuthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth> PatchRequiresAuthAsync(global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchRequiresAuth, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PostResetTodos(global::ServiceStack.Extensions.Tests.Protoc.ResetTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostResetTodos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PostResetTodos(global::ServiceStack.Extensions.Tests.Protoc.ResetTodos request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostResetTodos, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostResetTodosAsync(global::ServiceStack.Extensions.Tests.Protoc.ResetTodos request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostResetTodosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostResetTodosAsync(global::ServiceStack.Extensions.Tests.Protoc.ResetTodos request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostResetTodos, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse PostSecured(global::ServiceStack.Extensions.Tests.Protoc.Secured request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSecured(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse PostSecured(global::ServiceStack.Extensions.Tests.Protoc.Secured request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostSecured, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse> PostSecuredAsync(global::ServiceStack.Extensions.Tests.Protoc.Secured request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostSecuredAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse> PostSecuredAsync(global::ServiceStack.Extensions.Tests.Protoc.Secured request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostSecured, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::ServiceStack.Extensions.Tests.Protoc.FileContent> ServerStreamFiles(global::ServiceStack.Extensions.Tests.Protoc.StreamFiles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStreamFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::ServiceStack.Extensions.Tests.Protoc.FileContent> ServerStreamFiles(global::ServiceStack.Extensions.Tests.Protoc.StreamFiles request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerStreamFiles, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie GetStreamMovies(global::ServiceStack.Extensions.Tests.Protoc.StreamMovies request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStreamMovies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie GetStreamMovies(global::ServiceStack.Extensions.Tests.Protoc.StreamMovies request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStreamMovies, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie> GetStreamMoviesAsync(global::ServiceStack.Extensions.Tests.Protoc.StreamMovies request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStreamMoviesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie> GetStreamMoviesAsync(global::ServiceStack.Extensions.Tests.Protoc.StreamMovies request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStreamMovies, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::ServiceStack.Extensions.Tests.Protoc.StreamServerEventsResponse> ServerStreamServerEvents(global::ServiceStack.Extensions.Tests.Protoc.StreamServerEvents request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStreamServerEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::ServiceStack.Extensions.Tests.Protoc.StreamServerEventsResponse> ServerStreamServerEvents(global::ServiceStack.Extensions.Tests.Protoc.StreamServerEvents request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerStreamServerEvents, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse GetThrow(global::ServiceStack.Extensions.Tests.Protoc.Throw request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetThrow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.HelloResponse GetThrow(global::ServiceStack.Extensions.Tests.Protoc.Throw request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetThrow, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> GetThrowAsync(global::ServiceStack.Extensions.Tests.Protoc.Throw request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetThrowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.HelloResponse> GetThrowAsync(global::ServiceStack.Extensions.Tests.Protoc.Throw request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetThrow, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse GetThrowCustom(global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetThrowCustom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse GetThrowCustom(global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetThrowCustom, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse> GetThrowCustomAsync(global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetThrowCustomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse> GetThrowCustomAsync(global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetThrowCustom, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse GetThrowVoid(global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetThrowVoid(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse GetThrowVoid(global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetThrowVoid, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetThrowVoidAsync(global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetThrowVoidAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> GetThrowVoidAsync(global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetThrowVoid, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PostTriggerValidators(global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTriggerValidators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PostTriggerValidators(global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostTriggerValidators, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostTriggerValidatorsAsync(global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostTriggerValidatorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PostTriggerValidatorsAsync(global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostTriggerValidators, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse PostUnAssignRoles(global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUnAssignRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse PostUnAssignRoles(global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostUnAssignRoles, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse> PostUnAssignRolesAsync(global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostUnAssignRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse> PostUnAssignRolesAsync(global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostUnAssignRoles, null, options, request);
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PutUpdateTodo(global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutUpdateTodo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse PutUpdateTodo(global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PutUpdateTodo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PutUpdateTodoAsync(global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutUpdateTodoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse> PutUpdateTodoAsync(global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PutUpdateTodo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GrpcServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrpcServicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GrpcServicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAddHeader, serviceImpl.GetAddHeader)
          .AddMethod(__Method_GetAnyHello, serviceImpl.GetAnyHello)
          .AddMethod(__Method_PostAnyHello, serviceImpl.PostAnyHello)
          .AddMethod(__Method_PutAnyHello, serviceImpl.PutAnyHello)
          .AddMethod(__Method_DeleteAnyHello, serviceImpl.DeleteAnyHello)
          .AddMethod(__Method_PatchAnyHello, serviceImpl.PatchAnyHello)
          .AddMethod(__Method_PostAssignRoles, serviceImpl.PostAssignRoles)
          .AddMethod(__Method_OptionsAuthenticate, serviceImpl.OptionsAuthenticate)
          .AddMethod(__Method_GetAuthenticate, serviceImpl.GetAuthenticate)
          .AddMethod(__Method_PostAuthenticate, serviceImpl.PostAuthenticate)
          .AddMethod(__Method_DeleteAuthenticate, serviceImpl.DeleteAuthenticate)
          .AddMethod(__Method_GetChangeConnectionInfo, serviceImpl.GetChangeConnectionInfo)
          .AddMethod(__Method_GetChangeDb, serviceImpl.GetChangeDb)
          .AddMethod(__Method_PostConvertSessionToToken, serviceImpl.PostConvertSessionToToken)
          .AddMethod(__Method_PostCreateTodo, serviceImpl.PostCreateTodo)
          .AddMethod(__Method_CallDeleteTodo, serviceImpl.CallDeleteTodo)
          .AddMethod(__Method_CallDeleteTodos, serviceImpl.CallDeleteTodos)
          .AddMethod(__Method_PostGetAccessToken, serviceImpl.PostGetAccessToken)
          .AddMethod(__Method_CallGetApiKeys, serviceImpl.CallGetApiKeys)
          .AddMethod(__Method_CallGetHello, serviceImpl.CallGetHello)
          .AddMethod(__Method_CallGetTodo, serviceImpl.CallGetTodo)
          .AddMethod(__Method_CallGetTodos, serviceImpl.CallGetTodos)
          .AddMethod(__Method_GetHelloJwt, serviceImpl.GetHelloJwt)
          .AddMethod(__Method_PostHelloJwt, serviceImpl.PostHelloJwt)
          .AddMethod(__Method_PutHelloJwt, serviceImpl.PutHelloJwt)
          .AddMethod(__Method_DeleteHelloJwt, serviceImpl.DeleteHelloJwt)
          .AddMethod(__Method_PatchHelloJwt, serviceImpl.PatchHelloJwt)
          .AddMethod(__Method_GetIncr, serviceImpl.GetIncr)
          .AddMethod(__Method_PostIncr, serviceImpl.PostIncr)
          .AddMethod(__Method_PutIncr, serviceImpl.PutIncr)
          .AddMethod(__Method_DeleteIncr, serviceImpl.DeleteIncr)
          .AddMethod(__Method_PatchIncr, serviceImpl.PatchIncr)
          .AddMethod(__Method_PostMultiply, serviceImpl.PostMultiply)
          .AddMethod(__Method_CallPostChatToChannel, serviceImpl.CallPostChatToChannel)
          .AddMethod(__Method_GetQueryCaseInsensitiveOrderBy, serviceImpl.GetQueryCaseInsensitiveOrderBy)
          .AddMethod(__Method_GetQueryChangeConnectionInfo, serviceImpl.GetQueryChangeConnectionInfo)
          .AddMethod(__Method_GetQueryCustomRockstarsReferences, serviceImpl.GetQueryCustomRockstarsReferences)
          .AddMethod(__Method_GetQueryOverridedCustomRockstars, serviceImpl.GetQueryOverridedCustomRockstars)
          .AddMethod(__Method_GetQueryOverridedRockstars, serviceImpl.GetQueryOverridedRockstars)
          .AddMethod(__Method_GetQueryRockstarAlbumsCustomLeftJoin, serviceImpl.GetQueryRockstarAlbumsCustomLeftJoin)
          .AddMethod(__Method_PostRegenerateApiKeys, serviceImpl.PostRegenerateApiKeys)
          .AddMethod(__Method_PutRegister, serviceImpl.PutRegister)
          .AddMethod(__Method_PostRegister, serviceImpl.PostRegister)
          .AddMethod(__Method_GetRequiresAuth, serviceImpl.GetRequiresAuth)
          .AddMethod(__Method_PostRequiresAuth, serviceImpl.PostRequiresAuth)
          .AddMethod(__Method_PutRequiresAuth, serviceImpl.PutRequiresAuth)
          .AddMethod(__Method_DeleteRequiresAuth, serviceImpl.DeleteRequiresAuth)
          .AddMethod(__Method_PatchRequiresAuth, serviceImpl.PatchRequiresAuth)
          .AddMethod(__Method_PostResetTodos, serviceImpl.PostResetTodos)
          .AddMethod(__Method_PostSecured, serviceImpl.PostSecured)
          .AddMethod(__Method_ServerStreamFiles, serviceImpl.ServerStreamFiles)
          .AddMethod(__Method_GetStreamMovies, serviceImpl.GetStreamMovies)
          .AddMethod(__Method_ServerStreamServerEvents, serviceImpl.ServerStreamServerEvents)
          .AddMethod(__Method_GetThrow, serviceImpl.GetThrow)
          .AddMethod(__Method_GetThrowCustom, serviceImpl.GetThrowCustom)
          .AddMethod(__Method_GetThrowVoid, serviceImpl.GetThrowVoid)
          .AddMethod(__Method_PostTriggerValidators, serviceImpl.PostTriggerValidators)
          .AddMethod(__Method_PostUnAssignRoles, serviceImpl.PostUnAssignRoles)
          .AddMethod(__Method_PutUpdateTodo, serviceImpl.PutUpdateTodo).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GrpcServicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAddHeader, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.AddHeader, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.GetAddHeader));
      serviceBinder.AddMethod(__Method_GetAnyHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(serviceImpl.GetAnyHello));
      serviceBinder.AddMethod(__Method_PostAnyHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(serviceImpl.PostAnyHello));
      serviceBinder.AddMethod(__Method_PutAnyHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(serviceImpl.PutAnyHello));
      serviceBinder.AddMethod(__Method_DeleteAnyHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(serviceImpl.DeleteAnyHello));
      serviceBinder.AddMethod(__Method_PatchAnyHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.AnyHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(serviceImpl.PatchAnyHello));
      serviceBinder.AddMethod(__Method_PostAssignRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.AssignRoles, global::ServiceStack.Extensions.Tests.Protoc.AssignRolesResponse>(serviceImpl.PostAssignRoles));
      serviceBinder.AddMethod(__Method_OptionsAuthenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse>(serviceImpl.OptionsAuthenticate));
      serviceBinder.AddMethod(__Method_GetAuthenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse>(serviceImpl.GetAuthenticate));
      serviceBinder.AddMethod(__Method_PostAuthenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse>(serviceImpl.PostAuthenticate));
      serviceBinder.AddMethod(__Method_DeleteAuthenticate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Authenticate, global::ServiceStack.Extensions.Tests.Protoc.AuthenticateResponse>(serviceImpl.DeleteAuthenticate));
      serviceBinder.AddMethod(__Method_GetChangeConnectionInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.ChangeConnectionInfo, global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse>(serviceImpl.GetChangeConnectionInfo));
      serviceBinder.AddMethod(__Method_GetChangeDb, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.ChangeDb, global::ServiceStack.Extensions.Tests.Protoc.ChangeDbResponse>(serviceImpl.GetChangeDb));
      serviceBinder.AddMethod(__Method_PostConvertSessionToToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToToken, global::ServiceStack.Extensions.Tests.Protoc.ConvertSessionToTokenResponse>(serviceImpl.PostConvertSessionToToken));
      serviceBinder.AddMethod(__Method_PostCreateTodo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.CreateTodo, global::ServiceStack.Extensions.Tests.Protoc.CreateTodoResponse>(serviceImpl.PostCreateTodo));
      serviceBinder.AddMethod(__Method_CallDeleteTodo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.DeleteTodo, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.CallDeleteTodo));
      serviceBinder.AddMethod(__Method_CallDeleteTodos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.DeleteTodos, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.CallDeleteTodos));
      serviceBinder.AddMethod(__Method_PostGetAccessToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.GetAccessToken, global::ServiceStack.Extensions.Tests.Protoc.GetAccessTokenResponse>(serviceImpl.PostGetAccessToken));
      serviceBinder.AddMethod(__Method_CallGetApiKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.GetApiKeys, global::ServiceStack.Extensions.Tests.Protoc.GetApiKeysResponse>(serviceImpl.CallGetApiKeys));
      serviceBinder.AddMethod(__Method_CallGetHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.GetHello, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(serviceImpl.CallGetHello));
      serviceBinder.AddMethod(__Method_CallGetTodo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.GetTodo, global::ServiceStack.Extensions.Tests.Protoc.GetTodoResponse>(serviceImpl.CallGetTodo));
      serviceBinder.AddMethod(__Method_CallGetTodos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.GetTodos, global::ServiceStack.Extensions.Tests.Protoc.GetTodosResponse>(serviceImpl.CallGetTodos));
      serviceBinder.AddMethod(__Method_GetHelloJwt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(serviceImpl.GetHelloJwt));
      serviceBinder.AddMethod(__Method_PostHelloJwt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(serviceImpl.PostHelloJwt));
      serviceBinder.AddMethod(__Method_PutHelloJwt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(serviceImpl.PutHelloJwt));
      serviceBinder.AddMethod(__Method_DeleteHelloJwt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(serviceImpl.DeleteHelloJwt));
      serviceBinder.AddMethod(__Method_PatchHelloJwt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.HelloJwt, global::ServiceStack.Extensions.Tests.Protoc.HelloJwtResponse>(serviceImpl.PatchHelloJwt));
      serviceBinder.AddMethod(__Method_GetIncr, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.GetIncr));
      serviceBinder.AddMethod(__Method_PostIncr, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.PostIncr));
      serviceBinder.AddMethod(__Method_PutIncr, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.PutIncr));
      serviceBinder.AddMethod(__Method_DeleteIncr, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.DeleteIncr));
      serviceBinder.AddMethod(__Method_PatchIncr, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Incr, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.PatchIncr));
      serviceBinder.AddMethod(__Method_PostMultiply, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Multiply, global::ServiceStack.Extensions.Tests.Protoc.MultiplyResponse>(serviceImpl.PostMultiply));
      serviceBinder.AddMethod(__Method_CallPostChatToChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.PostChatToChannel, global::ServiceStack.Extensions.Tests.Protoc.ChatMessage>(serviceImpl.CallPostChatToChannel));
      serviceBinder.AddMethod(__Method_GetQueryCaseInsensitiveOrderBy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.QueryCaseInsensitiveOrderBy, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar>(serviceImpl.GetQueryCaseInsensitiveOrderBy));
      serviceBinder.AddMethod(__Method_GetQueryChangeConnectionInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.QueryChangeConnectionInfo, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar>(serviceImpl.GetQueryChangeConnectionInfo));
      serviceBinder.AddMethod(__Method_GetQueryCustomRockstarsReferences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.QueryCustomRockstarsReferences, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_RockstarReference>(serviceImpl.GetQueryCustomRockstarsReferences));
      serviceBinder.AddMethod(__Method_GetQueryOverridedCustomRockstars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedCustomRockstars, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar>(serviceImpl.GetQueryOverridedCustomRockstars));
      serviceBinder.AddMethod(__Method_GetQueryOverridedRockstars, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.QueryOverridedRockstars, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Rockstar>(serviceImpl.GetQueryOverridedRockstars));
      serviceBinder.AddMethod(__Method_GetQueryRockstarAlbumsCustomLeftJoin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.QueryRockstarAlbumsCustomLeftJoin, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_CustomRockstar>(serviceImpl.GetQueryRockstarAlbumsCustomLeftJoin));
      serviceBinder.AddMethod(__Method_PostRegenerateApiKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeys, global::ServiceStack.Extensions.Tests.Protoc.RegenerateApiKeysResponse>(serviceImpl.PostRegenerateApiKeys));
      serviceBinder.AddMethod(__Method_PutRegister, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Register, global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse>(serviceImpl.PutRegister));
      serviceBinder.AddMethod(__Method_PostRegister, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Register, global::ServiceStack.Extensions.Tests.Protoc.RegisterResponse>(serviceImpl.PostRegister));
      serviceBinder.AddMethod(__Method_GetRequiresAuth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(serviceImpl.GetRequiresAuth));
      serviceBinder.AddMethod(__Method_PostRequiresAuth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(serviceImpl.PostRequiresAuth));
      serviceBinder.AddMethod(__Method_PutRequiresAuth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(serviceImpl.PutRequiresAuth));
      serviceBinder.AddMethod(__Method_DeleteRequiresAuth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(serviceImpl.DeleteRequiresAuth));
      serviceBinder.AddMethod(__Method_PatchRequiresAuth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth, global::ServiceStack.Extensions.Tests.Protoc.RequiresAuth>(serviceImpl.PatchRequiresAuth));
      serviceBinder.AddMethod(__Method_PostResetTodos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.ResetTodos, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.PostResetTodos));
      serviceBinder.AddMethod(__Method_PostSecured, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Secured, global::ServiceStack.Extensions.Tests.Protoc.SecuredResponse>(serviceImpl.PostSecured));
      serviceBinder.AddMethod(__Method_ServerStreamFiles, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ServiceStack.Extensions.Tests.Protoc.StreamFiles, global::ServiceStack.Extensions.Tests.Protoc.FileContent>(serviceImpl.ServerStreamFiles));
      serviceBinder.AddMethod(__Method_GetStreamMovies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.StreamMovies, global::ServiceStack.Extensions.Tests.Protoc.QueryResponse_Movie>(serviceImpl.GetStreamMovies));
      serviceBinder.AddMethod(__Method_ServerStreamServerEvents, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::ServiceStack.Extensions.Tests.Protoc.StreamServerEvents, global::ServiceStack.Extensions.Tests.Protoc.StreamServerEventsResponse>(serviceImpl.ServerStreamServerEvents));
      serviceBinder.AddMethod(__Method_GetThrow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.Throw, global::ServiceStack.Extensions.Tests.Protoc.HelloResponse>(serviceImpl.GetThrow));
      serviceBinder.AddMethod(__Method_GetThrowCustom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.ThrowCustom, global::ServiceStack.Extensions.Tests.Protoc.ThrowCustomResponse>(serviceImpl.GetThrowCustom));
      serviceBinder.AddMethod(__Method_GetThrowVoid, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.ThrowVoid, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.GetThrowVoid));
      serviceBinder.AddMethod(__Method_PostTriggerValidators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.TriggerValidators, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.PostTriggerValidators));
      serviceBinder.AddMethod(__Method_PostUnAssignRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.UnAssignRoles, global::ServiceStack.Extensions.Tests.Protoc.UnAssignRolesResponse>(serviceImpl.PostUnAssignRoles));
      serviceBinder.AddMethod(__Method_PutUpdateTodo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ServiceStack.Extensions.Tests.Protoc.UpdateTodo, global::ServiceStack.Extensions.Tests.Protoc.EmptyResponse>(serviceImpl.PutUpdateTodo));
    }

  }
}
#endregion
