// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UpdateSessionOperations.
    /// </summary>
    public static partial class UpdateSessionOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GetSessionResponse Get(this IUpdateSessionOperations operations, string customName = default(string), UpdateSession body = default(UpdateSession))
            {
                return operations.GetAsync(customName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetSessionResponse> GetAsync(this IUpdateSessionOperations operations, string customName = default(string), UpdateSession body = default(UpdateSession), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(customName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GetSessionResponse Create(this IUpdateSessionOperations operations, string customName = default(string), UpdateSession body = default(UpdateSession))
            {
                return operations.CreateAsync(customName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetSessionResponse> CreateAsync(this IUpdateSessionOperations operations, string customName = default(string), UpdateSession body = default(UpdateSession), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(customName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GetSessionResponse Post(this IUpdateSessionOperations operations, string customName = default(string), UpdateSession body = default(UpdateSession))
            {
                return operations.PostAsync(customName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetSessionResponse> PostAsync(this IUpdateSessionOperations operations, string customName = default(string), UpdateSession body = default(UpdateSession), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(customName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GetSessionResponse Delete(this IUpdateSessionOperations operations, string customName = default(string), UpdateSession body = default(UpdateSession))
            {
                return operations.DeleteAsync(customName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetSessionResponse> DeleteAsync(this IUpdateSessionOperations operations, string customName = default(string), UpdateSession body = default(UpdateSession), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(customName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
