// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HelloOperations.
    /// </summary>
    public static partial class HelloOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Get(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.GetAsync(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> GetAsync(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Create(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.CreateAsync(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> CreateAsync(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Post(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.PostAsync(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> PostAsync(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Delete(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.DeleteAsync(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> DeleteAsync(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Update(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.UpdateAsync(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> UpdateAsync(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Get1(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.Get1Async(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> Get1Async(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Create1(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.Create1Async(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> Create1Async(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Create1WithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Post1(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.Post1Async(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> Post1Async(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post1WithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Delete1(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.Delete1Async(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> Delete1Async(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Delete1WithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            public static HelloResponse Update1(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json")
            {
                return operations.Update1Async(name, title, body, format).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='format'>
            /// Specifies response output format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloResponse> Update1Async(this IHelloOperations operations, string name = default(string), string title = default(string), Hello body = default(Hello), string format = "json", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Update1WithHttpMessagesAsync(name, title, body, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
